[{"/home/jouziefrontend/wayshub-frontend/src/index.js":"1","/home/jouziefrontend/wayshub-frontend/src/App.js":"2","/home/jouziefrontend/wayshub-frontend/src/context/AppContext.js":"3","/home/jouziefrontend/wayshub-frontend/src/route/PrivateRoute.js":"4","/home/jouziefrontend/wayshub-frontend/src/pages/Home.js":"5","/home/jouziefrontend/wayshub-frontend/src/pages/Login.js":"6","/home/jouziefrontend/wayshub-frontend/src/pages/Register.js":"7","/home/jouziefrontend/wayshub-frontend/src/pages/Subscribtion.js":"8","/home/jouziefrontend/wayshub-frontend/src/pages/MyChannel.js":"9","/home/jouziefrontend/wayshub-frontend/src/pages/AddVideo.js":"10","/home/jouziefrontend/wayshub-frontend/src/pages/Detail.js":"11","/home/jouziefrontend/wayshub-frontend/src/pages/EditChannel.js":"12","/home/jouziefrontend/wayshub-frontend/src/pages/ContentCreator.js":"13","/home/jouziefrontend/wayshub-frontend/src/config/api.js":"14","/home/jouziefrontend/wayshub-frontend/src/component/sidebar/Sidebar.js":"15","/home/jouziefrontend/wayshub-frontend/src/component/card/Card.js":"16","/home/jouziefrontend/wayshub-frontend/src/component/loader/PageLoader.js":"17","/home/jouziefrontend/wayshub-frontend/src/component/navbar/Navbar.js":"18","/home/jouziefrontend/wayshub-frontend/src/component/loader/ButtonLoader.js":"19","/home/jouziefrontend/wayshub-frontend/src/component/loader/VideoChanelLoader.js":"20","/home/jouziefrontend/wayshub-frontend/src/component/form/InputField.js":"21","/home/jouziefrontend/wayshub-frontend/src/component/form/Alert.js":"22","/home/jouziefrontend/wayshub-frontend/src/component/channel/ChannelHeader.js":"23","/home/jouziefrontend/wayshub-frontend/src/component/form/TextAreaField.js":"24","/home/jouziefrontend/wayshub-frontend/src/component/channel/ChannelDescription.js":"25","/home/jouziefrontend/wayshub-frontend/src/component/channel/ChannelVideo.js":"26","/home/jouziefrontend/wayshub-frontend/src/component/video/EmptyVideo.js":"27","/home/jouziefrontend/wayshub-frontend/src/component/video/Video.js":"28","/home/jouziefrontend/wayshub-frontend/src/component/form/SuccessInfo.js":"29","/home/jouziefrontend/wayshub-frontend/src/component/progressbar/ProgressBar.js":"30","/home/jouziefrontend/wayshub-frontend/src/component/modal/SubscribeModal.js":"31","/home/jouziefrontend/wayshub-frontend/src/component/preview/Preview.js":"32","/home/jouziefrontend/wayshub-frontend/src/component/modal/Modal.js":"33","/home/jouziefrontend/wayshub-frontend/src/component/loader/CardLoader.js":"34","/home/jouziefrontend/wayshub-frontend/src/component/form/ErrorInfo.js":"35","/home/jouziefrontend/wayshub-frontend/src/component/dropdown/Dropdown.js":"36","/home/jouziefrontend/wayshub-frontend/src/component/dropdown/DropdownVideo.js":"37","/home/jouziefrontend/wayshub-frontend/src/component/search/SearchResult.js":"38","/home/jouziefrontend/wayshub-frontend/src/component/comment/Comment.js":"39","/home/jouziefrontend/wayshub-frontend/src/component/comment/CommentList.js":"40","/home/jouziefrontend/wayshub-frontend/src/component/modal/CommentModal.js":"41","/home/jouziefrontend/wayshub-frontend/src/component/loader/CommentLoader.js":"42","/home/jouziefrontend/wayshub-frontend/src/component/dropdown/DropdownComment.js":"43"},{"size":334,"mtime":1617729088877,"results":"44","hashOfConfig":"45"},{"size":2239,"mtime":1617729088865,"results":"46","hashOfConfig":"45"},{"size":2214,"mtime":1617729088869,"results":"47","hashOfConfig":"45"},{"size":624,"mtime":1617729088881,"results":"48","hashOfConfig":"45"},{"size":3276,"mtime":1617729088877,"results":"49","hashOfConfig":"45"},{"size":4165,"mtime":1617729088877,"results":"50","hashOfConfig":"45"},{"size":5553,"mtime":1617729088877,"results":"51","hashOfConfig":"45"},{"size":2374,"mtime":1617729088881,"results":"52","hashOfConfig":"45"},{"size":3717,"mtime":1617729088877,"results":"53","hashOfConfig":"45"},{"size":6888,"mtime":1617729088877,"results":"54","hashOfConfig":"45"},{"size":11448,"mtime":1617729088877,"results":"55","hashOfConfig":"45"},{"size":8669,"mtime":1617729088877,"results":"56","hashOfConfig":"45"},{"size":7526,"mtime":1617729088877,"results":"57","hashOfConfig":"45"},{"size":358,"mtime":1618140657404,"results":"58","hashOfConfig":"45"},{"size":3070,"mtime":1617729088869,"results":"59","hashOfConfig":"45"},{"size":2984,"mtime":1617729088865,"results":"60","hashOfConfig":"45"},{"size":210,"mtime":1617729088869,"results":"61","hashOfConfig":"45"},{"size":5130,"mtime":1617729088869,"results":"62","hashOfConfig":"45"},{"size":146,"mtime":1617729088869,"results":"63","hashOfConfig":"45"},{"size":240,"mtime":1617729088869,"results":"64","hashOfConfig":"45"},{"size":2650,"mtime":1617729088865,"results":"65","hashOfConfig":"45"},{"size":182,"mtime":1617729088865,"results":"66","hashOfConfig":"45"},{"size":1560,"mtime":1617729088865,"results":"67","hashOfConfig":"45"},{"size":2578,"mtime":1617729088865,"results":"68","hashOfConfig":"45"},{"size":249,"mtime":1617729088865,"results":"69","hashOfConfig":"45"},{"size":956,"mtime":1617729088865,"results":"70","hashOfConfig":"45"},{"size":871,"mtime":1617729088869,"results":"71","hashOfConfig":"45"},{"size":5488,"mtime":1617729088869,"results":"72","hashOfConfig":"45"},{"size":194,"mtime":1617729088865,"results":"73","hashOfConfig":"45"},{"size":379,"mtime":1617729088869,"results":"74","hashOfConfig":"45"},{"size":709,"mtime":1617729088869,"results":"75","hashOfConfig":"45"},{"size":482,"mtime":1617729088869,"results":"76","hashOfConfig":"45"},{"size":979,"mtime":1617729088869,"results":"77","hashOfConfig":"45"},{"size":143,"mtime":1617729088869,"results":"78","hashOfConfig":"45"},{"size":256,"mtime":1617729088865,"results":"79","hashOfConfig":"45"},{"size":1415,"mtime":1617729088865,"results":"80","hashOfConfig":"45"},{"size":688,"mtime":1617729088865,"results":"81","hashOfConfig":"45"},{"size":1708,"mtime":1617729088869,"results":"82","hashOfConfig":"45"},{"size":1977,"mtime":1617729088865,"results":"83","hashOfConfig":"45"},{"size":2895,"mtime":1617729088865,"results":"84","hashOfConfig":"45"},{"size":999,"mtime":1617729088869,"results":"85","hashOfConfig":"45"},{"size":148,"mtime":1617729088869,"results":"86","hashOfConfig":"45"},{"size":702,"mtime":1617729088865,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"1jf877s",{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"90"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"90"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"90"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"90"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"90"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"90"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"90"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"90"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"90"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"90"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"90"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"90"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"90"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"90"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"90"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"90"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"90"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"/home/jouziefrontend/wayshub-frontend/src/index.js",[],["193","194"],"/home/jouziefrontend/wayshub-frontend/src/App.js",["195"],"import './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\n\n// component\n\nimport PrivateRoute from './route/PrivateRoute';\n\n// pages\nimport Login from './pages/Login';\nimport Register from './pages/Register';\nimport Home from './pages/Home';\nimport Subscribtion from './pages/Subscribtion';\nimport Detail from './pages/Detail';\nimport AddVideo from './pages/AddVideo';\nimport MyChannel from './pages/MyChannel';\nimport EditChannel from './pages/EditChannel';\nimport ContentCreator from './pages/ContentCreator';\n\nimport {API, setAuthToken} from './config/api';\nimport { AppContext } from './context/AppContext';\nimport { useContext, useEffect } from 'react';\n\nconst App = () => {\n  const [state, dispatch] = useContext(AppContext);\n\n  const loadUser = async () => {\n    \n    try {\n      \n\n      const token = localStorage.getItem('token');\n\n      if(!token){\n        return dispatch({\n          type: \"LOGOUT\"\n        });\n      }\n      setAuthToken(token);\n      \n      const response = await API.get('/auth');  \n\n      if(response.data.status !== \"success\"){\n          return dispatch({\n              type: \"AUTH_ERROR\"\n          });\n      }\n\n      dispatch({\n        type: \"LOAD_USER\",\n        payload: response.data.data.user\n      });\n\n    } catch(err){\n        console.log(err);\n        return dispatch({\n          type: \"AUTH_ERROR\",\n      });\n    }\n  }\n\n  useEffect(() => {\n    loadUser();\n  },[state.login]);\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/login\" component={Login} />\n          <Route exact path=\"/register\" component={Register} />\n          <PrivateRoute exact path=\"/\" component={Home} />\n          <PrivateRoute exact path=\"/subscribtion\" component={Subscribtion} />\n          <PrivateRoute exact path=\"/detail/:id\" component={Detail} />\n          <PrivateRoute exact path=\"/add\" component={AddVideo} />\n          <PrivateRoute exact path=\"/my-channel\" component={MyChannel} />\n          <PrivateRoute exact path=\"/edit-channel\" component={EditChannel} />\n          <PrivateRoute exact path=\"/content-creator/:id\" component={ContentCreator} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/home/jouziefrontend/wayshub-frontend/src/context/AppContext.js",[],"/home/jouziefrontend/wayshub-frontend/src/route/PrivateRoute.js",[],"/home/jouziefrontend/wayshub-frontend/src/pages/Home.js",["196","197"],"import { useState, useEffect } from 'react';\n\n// css\nimport '../App.css';\n\n// component\nimport Sidebar from '../component/sidebar/Sidebar';\nimport Navbar from '../component/navbar/Navbar';\nimport Card from '../component/card/Card';\nimport PageLoader from '../component/loader/PageLoader';\nimport ButtonLoader from '../component/loader/ButtonLoader';\n\n// data\nimport { API } from '../config/api';\n\nconst Home = () => {\n\n    const [error, setError] = useState(false);\n    const [loading, setLoading] = useState(true);\n    const [videos, setVideos] = useState([]);\n    const [limit, setLimit] = useState(8);\n    const [isFinish, setIsFinish] = useState(false);\n    const [loadShowMore, setLoadShowMore] = useState(false);\n\n    const getVideos = async () => {\n        try {\n            setLoading(true);\n\n            const response = await API.get(`/videos/${0}/${limit}`);\n\n            if(response.data.status !== \"success\"){\n                setError(true);\n                return;\n            }\n\n            setVideos(response.data.data.videos);\n            setLoading(false);\n\n        } catch(err){\n            console.log(err);\n            setLoading(false);\n        }\n    }\n\n    const showMore = async () => {\n        try {\n            setLoadShowMore(true);\n            const tmpData = [...videos];\n            const lastIndex = tmpData.length;\n\n            const response = await API.get(`/videos/${lastIndex}/${limit}`);\n\n            if(response.data.data.videos.length === 0){\n                setIsFinish(true);\n            }\n\n            for(let i = 0; i < response.data.data.videos.length; i++){\n                tmpData[lastIndex + i] = response.data.data.videos[i]\n            }\n\n            setVideos(tmpData);\n            setLoadShowMore(false);\n        } catch(err){\n            console.log(err);\n            setLoadShowMore(false);\n        }\n    }\n\n    useEffect(() => {\n        getVideos();\n    }, []);\n\n   return(\n    <div className=\"wrapper\">\n        <Sidebar />\n        <div className=\"container\">\n            <Navbar />\n            {error ? (\n                <h1>Server Error</h1>\n            ): loading ? (\n                <PageLoader />\n            ):(\n                <>\n                    <div className=\"card-content\">\n                        {videos.map(video => {                       \n                            return <Card \n                                        key={video.id} \n                                        data={video}\n                                        edit={false} \n                                    />\n                        })}\n                    </div>\n        \n                    {isFinish ? (\n                        null\n                    ):(\n                        <div className=\"show-more-videos-wrapper\">\n                            <button onClick={showMore} className=\"show-more-videos\">\n                                {loadShowMore ? (\n                                    <ButtonLoader />\n                                ): (\n                                    \"Show More\"\n                                )}    \n                            </button>\n                        </div>\n                    )}\n                </>\n            )}\n        </div>\n    </div>\n        \n   )\n}\n\nexport default Home;","/home/jouziefrontend/wayshub-frontend/src/pages/Login.js",["198","199"],"import {Link} from 'react-router-dom';\nimport {useState, useRef, createRef, useContext} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {AppContext} from '../context/AppContext';\nimport '../App.css';\nimport title from '../title.svg';\nimport InputField from '../component/form/InputField';\nimport Alert from '../component/form/Alert';\nimport { API, setAuthToken } from '../config/api';\n\nconst Login = () => {\n    const router = useHistory()\n    const [state, dispatch] = useContext(AppContext);\n    const [loading, setLoading] = useState(false);\n    const inputRef = useRef([createRef(), createRef()]);\n    const [error, setError] = useState({\n        status: false,\n        message: ''\n    });\n  \n    const [formData, setFormData] = useState({\n        email: \"\",\n        password: \"\"\n    });\n\n    const validate = () => {\n        const error = [];\n        for(let i = 0; i < inputRef.current.length; i++){\n            const valid = inputRef.current[i].current.validate();\n\n            if(!valid){\n                error.push(\"error\");\n            }\n        }\n\n        if(error.length > 0){\n            return false;\n        }\n\n        inputRef.current[0].current.doSubmit();\n        inputRef.current[1].current.doSubmit();\n\n        return true;\n    }\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        try {\n            setLoading(true);\n            if(!validate()){\n                setLoading(false);\n                return false;\n            }\n\n            const body = JSON.stringify(formData);\n            const config = {\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            }\n            const response = await API.post('/login', body, config);\n\n            if(response.data.status === \"error\"){\n                \n                setError({\n                    status: true,\n                    message: \"Invalid login\"\n                });\n                setLoading(false);\n                return false;\n            }\n\n            dispatch({\n                type: 'LOGIN',\n                payload: response.data.data.chanel\n            });\n\n            setAuthToken(response.data.data.chanel.token);\n            router.push('/');\n           \n        } catch(err){\n            console.log(err);\n        }\n    }\n\n    const handleInputChange = (name, value) => {\n        setError({\n            status: false\n        });\n\n        setFormData({\n            ...formData,\n            [name] : value\n        });\n    }\n\n    return(\n        <div className=\"landing-container\">\n            <div className=\"landing-welcome\">\n                <img src={title} alt =\"title\" />\n                <Link to=\"/register\" className=\"link\">\n                    <button className=\"button\">Sign Up</button>\n                </Link>\n            </div>\n\n            <div className=\"landing-form\">\n                <h1>Sign In</h1>\n                {error.status ? <Alert status=\"error-info\" message={error.message} />:null}\n                <form onSubmit={handleSubmit}>\n                    <InputField \n                        type=\"text\" \n                        placeholder=\"Email\" \n                        name=\"email\" \n                        onChange={(name, value) => handleInputChange(name, value)}\n                        autoComplete=\"off\"\n                        value={formData.email}\n                        ref={inputRef.current[0]}\n                        validation={['required', 'email']}\n            \n                    />\n                    <InputField \n                        type=\"password\" \n                        placeholder=\"Password\"\n                        name=\"password\"\n                        onChange={(name, value) => handleInputChange(name, value)}\n                        autoComplete=\"off\"\n                        value={formData.password}\n                        ref={inputRef.current[1]}\n                        validation={['required']}\n                        \n                    />\n                    <button className=\"button\">Sign In</button>\n                </form>\n            </div>\n        </div> \n    )\n}\n\nexport default Login;","/home/jouziefrontend/wayshub-frontend/src/pages/Register.js",[],"/home/jouziefrontend/wayshub-frontend/src/pages/Subscribtion.js",[],"/home/jouziefrontend/wayshub-frontend/src/pages/MyChannel.js",["200"],"import { useState, useEffect } from 'react';\nimport '../App.css';\nimport ChannelHeader from '../component/channel/ChannelHeader';\nimport ChannelDescription from '../component/channel/ChannelDescription';\nimport ChannelVideo from '../component/channel/ChannelVideo';\nimport Sidebar from '../component/sidebar/Sidebar';\nimport Navbar from '../component/navbar/Navbar';\nimport VideoChanelLoader from '../component/loader/VideoChanelLoader';\nimport EmptyVideo from '../component/video/EmptyVideo';\n\nimport { API } from '../config/api';\n\nconst MyChannel = () => {\n    const [isVideo, setIsVideo] = useState(true);\n\n    const [error, setError] = useState(false);\n    const [loading, setLoading] = useState(true);\n    const [chanel, setChanel] = useState([]);\n    const [videos, setVideos] = useState([]);\n    const currentUser = JSON.parse(localStorage.getItem('user'));\n\n    const deleteVideo = async (chanelId) => {\n        try {\n            setLoading(true);\n            const response = await API.delete(`/video/${chanelId}`);\n\n            if(response.data.status !== \"success\"){\n                setLoading(false);\n                console.log(response.data.error.message);\n                return;\n            }\n            getChanelById();\n\n        } catch(err){\n            console.log(err);\n        }\n    }\n    \n\n    const getChanelById = async () => {\n        try {\n            setLoading(true);\n\n            const response = await API.get(`/chanel/${currentUser.id}`);\n\n            if(response.data.status !== \"success\"){\n                setLoading(false);\n                setError(true);\n                return;\n            }\n            const videosByChanelId = await API.get(`/chanel/${currentUser.id}/videos`);\n            \n            if(videosByChanelId.data.status !== \"success\"){\n                setLoading(false);\n                setError(true);\n                return;\n            }\n\n            setChanel(response.data.data.chanel);\n            setVideos(videosByChanelId.data.data.videos);\n           \n            setLoading(false);\n        } catch(err){\n            console.log(err);\n        }\n    }\n\n    useEffect(() => {\n        getChanelById();\n    }, []);\n\n    const handleChannel = (status) => {\n        setIsVideo(status)\n    }\n\n    return(\n        <div className=\"wrapper\">\n            <Sidebar />\n            <div className=\"container\">\n                <Navbar />\n                {error ? (\n                    <h1>Server Error</h1>\n                ): loading ? (\n                    <VideoChanelLoader />\n                ):(\n                    <>\n                        <div className=\"cover\">\n                            <img src={JSON.parse(chanel.cover).path} alt=\"cover\" />\n                        </div>\n                        <div className=\"channel-wrapper\">\n                            <ChannelHeader current={(status) => handleChannel(status)} data={chanel}/>\n                            {(isVideo)? \n                                (videos.length > 0 ? \n                                    (\n                                        <ChannelVideo \n                                            actionDelete={(chanelId => deleteVideo(chanelId))} \n                                            videos={videos}\n                                            edit={true} \n                                        />\n                                    ): (<EmptyVideo myChannel={true} />)\n                                ):\n                                (<ChannelDescription data={chanel} />)\n                            }\n                        </div>\n                    </>\n                )}\n                \n            </div>\n        </div>\n        \n    )\n}\n\nexport default MyChannel;","/home/jouziefrontend/wayshub-frontend/src/pages/AddVideo.js",["201","202"],"import '../App.css';\n\nimport React, { useState, useEffect } from 'react';\nimport attach_thumbnail from '../icon/attach_thumbnail.png';\nimport add_video_icon_active from '../icon/add_video_icon_active.svg';\n\nimport Sidebar from '../component/sidebar/Sidebar';\nimport Navbar from '../component//navbar/Navbar';\n\nimport Alert from '../component/form/Alert';\nimport ButtonLoader from '../component/loader/ButtonLoader';\nimport SuccessInfo from '../component/form/SuccessInfo';\nimport ProgressBar from '../component/progressbar/ProgressBar';\n\nimport { API } from '../config/api';\n\nconst AddVideo = () => {\n    const [thumbnail, setThumbnail] = useState('Attach Thumbnail');\n    const [video, setVideo] = useState('Upload Video');\n    const [progres, setProgres] = useState(0);\n\n    const thumbnailFile = React.useRef();\n    const videoFile = React.useRef();\n\n    const [success, setSuccess] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState({\n        status: false,\n        message: \"\"\n    });\n\n    const [formData, setFormData] = useState({\n        title: \"\",\n        description: \"\",\n        thumbnail: \"\",\n        video: \"\"\n    });\n\n    const currentUser = JSON.parse(localStorage.getItem('user'));\n\n    const handleThumbnailInputClick = () => {\n        thumbnailFile.current.click();\n    }\n\n    const handleThumbnailInputChange = (event) => {\n        \n        if(event.target.files[0]){\n            setThumbnail(event.target.files[0].name);\n            setFormData({\n                ...formData,\n                [event.target.name] : event.target.files[0]\n            })\n        } else {\n            setThumbnail('Attach Thumbnail');\n        }\n    }\n\n    const handleVideoInputClick = () => {\n        videoFile.current.click();\n    }\n\n    const handleVideoInputChange = (event) => {\n        if(event.target.files[0]){\n            setVideo(event.target.files[0].name);\n            setFormData({\n                ...formData,\n                [event.target.name] : event.target.files[0]\n            })\n        } else {\n            setVideo('Upload Video');\n        }\n    }\n\n    const handleChange = (event) => {\n        setSuccess(false);\n        setError({\n            ...error,\n            status: false\n        });\n        setFormData({\n            ...formData,\n            [event.target.name] : event.target.value\n        });\n    }\n\n    const handleSubmit = async (event)=>{\n        event.preventDefault();\n        setError({\n            ...error,\n            status: false\n        });\n        setSuccess(false);\n        setLoading(true);\n\n        const body = new FormData();\n        body.append('title', formData.title );\n        body.append('description', formData.description);\n        \n        if(thumbnailFile.current.files[0]){\n            body.append('thumbnail', formData.thumbnail);\n        }\n\n        if(videoFile.current.files[0]){\n            body.append('video', formData.video);\n        }\n\n        const config = {\n            headers: {\n              \"content-type\": \"multipart/form-data\",\n            },\n            onUploadProgress: (event)=> {\n                const {loaded, total} = event;\n                let percent = Math.floor( (loaded * 100) / total )\n                setProgres(percent);\n            }\n        };\n\n        try {\n            const response = await API.post('/video', body, config);\n\n            if(response.data.status !== \"success\"){\n                setSuccess(false);\n                \n                setError({\n                    ...error,\n                    status: true,\n                    message: response.data.error.message\n                });\n\n                console.log(response.data.error);\n\n                setProgres(0);\n                setLoading(false);\n\n                return;\n            }\n\n            setFormData({\n                title: \"\",\n                description: \"\",\n                thumbnail: \"\",\n                video: \"\",\n            });\n\n            thumbnailFile.current.value = \"\";\n            videoFile.current.value = \"\";\n            setVideo('Upload Video');\n            setThumbnail('Attach Thumbnail');\n            setProgres(0);\n            setLoading(false);\n            setSuccess(true);\n           \n        } catch(err){\n            setProgres(0);\n            setLoading(false);\n            console.log(err);\n        }\n    }\n\n    return(\n        <div className=\"wrapper\">\n            <Sidebar/>\n            <div className=\"container\">\n                <Navbar/>\n                {loading && (<ProgressBar message={progres} />)}\n                <div className=\"form-container\">\n                    <h1>Add Video</h1>\n                    {success && (<SuccessInfo message=\"Video added successfully\" />)}\n                    {error.status && (<Alert status=\"error-info\" message={error.message} />)}\n                    <form onSubmit={handleSubmit}>\n                        <div className=\"inline-input\">\n                            <input \n                                type=\"text\" \n                                placeholder=\"Title\"\n                                name=\"title\"\n                                autoComplete=\"off\"\n                                onChange={handleChange}\n                                value={formData.title}\n                            />\n                            <div className=\"file-upload\" onClick={handleThumbnailInputClick}>\n                                <label>{thumbnail}</label>\n                                <input type=\"file\" ref={thumbnailFile} onChange={handleThumbnailInputChange} name=\"thumbnail\"/>\n                                <img src={attach_thumbnail} alt=\"icon\"/>    \n                            </div>\n                        </div>\n                        <textarea \n                            placeholder=\"Description\" \n                            name=\"description\"\n                            onChange={handleChange}\n                            value={formData.description}\n                        >\n                        </textarea>\n                        <div className=\"input-file-container\">\n                            <div className=\"input-file\" onClick={handleVideoInputClick}>\n                                <label>{video}</label>\n                                <input type=\"file\" ref={videoFile} onChange={handleVideoInputChange} name=\"video\"/>\n                                <img src={add_video_icon_active} alt=\"icon\"/>    \n                            </div>\n                        </div>\n                        <button className=\"button\">\n                            {loading ? (\n                                <ButtonLoader />\n                            ): (\"Add\")}\n                        </button>\n                        \n                    </form>\n                </div>\n            </div>\n        </div>\n        \n    )\n}\n\nexport default AddVideo;","/home/jouziefrontend/wayshub-frontend/src/pages/Detail.js",["203","204"],"import { useState, useEffect, useContext } from 'react';\nimport {useParams} from 'react-router-dom';\n\n// css\nimport '../App.css';\n\n// component\nimport Video from '../component/video/Video';\nimport Card from '../component/card/Card';\nimport Sidebar from '../component/sidebar/Sidebar';\nimport Navbar from '../component//navbar/Navbar';\nimport PageLoader from '../component/loader/PageLoader';\nimport ButtonLoader from '../component/loader/ButtonLoader';\n\nimport { AppContext } from '../context/AppContext';\n\nimport { API } from '../config/api';\n\nconst Detail = () => {\n    const [state, dispatch] = useContext(AppContext);\n    const { id } = useParams();\n\n    const [error, setError] = useState(false);\n    const [limit, setLimit] = useState(5);\n    const [isFinish, setIsFinish] = useState(false);\n    const [loading, setLoading] = useState(true);\n    const [loadShowMore, setLoadShowMore] = useState(false);\n    const [video, setVideo] = useState();\n    const [recomendationVideos, setRecomendationVideos] = useState([]);\n    const [channel, setChanel] = useState();\n    const [comments, setComments] = useState([]);\n    const [subscribers, setSubscribers] = useState();\n    const currentUser = JSON.parse(localStorage.getItem('user'));\n\n    const [isLiked, setIsLiked] = useState(false);\n    const [countLikes, setCountLikes] = useState(0);\n\n\n    const getVideos = async () => {\n        try {\n            const response = await API.get(`/videos/${0}/${limit}`);\n\n            if(response.data.status !== \"success\"){\n                setError(true);\n                return;\n            }\n            setRecomendationVideos(response.data.data.videos);\n\n        } catch(err){\n            console.log(err);\n        }\n    }\n\n    const showMore = async () => {\n        \n       try {\n            setLoadShowMore(true);\n            const tmpData = [...recomendationVideos];\n            const lastIndex = tmpData.length;\n    \n            const response = await API.get(`/videos/${lastIndex}/${limit}`);\n    \n            if(response.data.data.videos.length === 0){\n                setIsFinish(true);\n            }\n    \n            for(let i = 0; i < response.data.data.videos.length; i++){\n                tmpData[lastIndex + i] = response.data.data.videos[i]\n            }\n    \n            setRecomendationVideos(tmpData);\n            setLoadShowMore(false);\n\n       } catch(err){\n           console.log(err);\n           setLoadShowMore(false);\n       }\n\n    }\n    \n\n    const getSubscribtion = async () => {\n        try {\n            const subscribtions = await API.get('/subscribe');\n\n            if(subscribtions.data.status === \"success\"){\n                dispatch({\n                    type: \"LOAD_SUBSCRIBTION\",\n                    payload: subscribtions.data.data\n                });\n                return;\n            }\n\n        } catch(err){\n            console.log(err)\n        }\n    }\n\n\n    const getVideoById = async () => {\n        try {\n            setLoading(true);\n\n            const response = await API.get(`/video/${id}`);\n\n            const chanelId = response.data.data.video.chanel.id;\n\n            const chanelById = await API.get(`/chanel/${chanelId}`);\n\n            if(response.data.status !== \"success\"){\n                setError(true);\n                setLoading(false);\n                return;\n            }\n\n            if(chanelById.data.status !== \"success\"){\n                setError(true);\n                setLoading(false);\n                return;\n            }\n\n            setChanel(chanelById.data.data.chanel);\n            setSubscribers(chanelById.data.data.chanel.subscribers.length);\n            setVideo(response.data.data.video);\n            setComments(response.data.data.video.comments.reverse());\n            setLoading(false);\n\n        } catch(err){\n            console.log(err);\n        }\n    }\n\n    const checkSubscribe = async () => {\n        try {\n            const body = {\n                chanelId: video.chanel.id\n            }\n\n\n            const response = await API.post('/check-subscribe', body);\n\n            if(response.data.status === \"success\"){\n                return true;\n                \n            }\n\n            return false;\n            \n        } catch(err){\n            console.log(err);\n        }\n    }\n\n    const doSubscribe = async () => {\n        try {\n\n            const body = {\n                chanelId: video.chanel.id\n            }\n\n            const response = await API.post('/subscribe', body);\n\n            if(response.data.status === \"success\"){\n                setSubscribers(subscribers + 1);\n                const subscribe = [...state.subscribtion];\n                subscribe.push(response.data.data.subscribe.chanel);\n                const subsbribtionAfterSubscribe = {\n                    subscribtion: subscribe\n                }\n\n                dispatch({\n                    type: \"SUBSCRIBE\",\n                    payload: subsbribtionAfterSubscribe\n                });\n\n                \n                return;\n            }\n\n            return;\n            \n        } catch(err){\n            console.log(err);\n        }\n    }\n\n    const doUnSubscribe = async () => {\n        try {\n\n            const chanelId = video.chanel.id;\n\n            const response = await API.delete(`/subscribe/${chanelId}`);\n\n            if(response.data.status === \"success\"){\n                const indexUnsubsribe = state.subscribtion.findIndex(subscribtion => subscribtion.id === parseInt(response.data.data.id));\n                \n                const subscribe = [...state.subscribtion];\n                subscribe.splice(indexUnsubsribe, 1);\n                const subsbribtionAfterUnSubscribe = {\n                    subscribtion: subscribe\n                }\n\n                dispatch({\n                    type: \"UNSUBSCRIBE\",\n                    payload: subsbribtionAfterUnSubscribe\n                });\n\n                setSubscribers(subscribers- 1);\n                return;\n            }\n\n            return;\n            \n        } catch(err){\n            console.log(err);\n        }\n    }\n\n    const addComment = async (formData) => {\n        try {  \n            const videoId = video.id \n            const response = await API.post(`/video/${videoId}/comment`, formData);\n\n            if(response.data.status === \"success\"){\n                setComments([\n                    response.data.data.comment,\n                    ...comments\n                    \n                ]);\n            }\n\n        } catch(err){\n            console.log(err);\n        }\n    }\n\n    const deleteComment = async (commentId) => {\n        try {\n            const videoId = video.id;\n\n            const response = await API.delete(`/video/${videoId}/comment/${commentId}`);\n\n            if(response.data.status === \"success\"){\n                const indexDeletedComment = comments.findIndex(comment => comment.id === commentId);\n                const commentsAfterDelete = [...comments];\n                commentsAfterDelete.splice(indexDeletedComment, 1);\n                setComments(commentsAfterDelete);\n                return;\n            }\n            \n\n        } catch(err){\n            console.log(err);\n        }\n    }    \n\n    const checkLike = async () => {\n        try {\n            const response = await API.get(`/check-like/${id}`);\n\n            if(response.data.status !== \"success\"){\n                setError(true);\n                return;\n            }\n\n            setIsLiked(response.data.data.isLiked);\n            setCountLikes(response.data.data.countLikes);\n        } catch(err){\n            console.log(err);\n        }\n    }\n\n    const doLike = async () => {\n        try{\n            const body = {\n                videoId: id\n            }\n\n            const response = await API.post('/add-like', body);\n\n            if(response.data.status !== \"success\"){\n                setError(true);\n                return;\n            }\n\n            setIsLiked(true);\n            setCountLikes(countLikes + 1);\n\n        } catch(err){\n            console.log(err)\n        }\n    }\n\n    const unLike = async () => {\n        try {\n\n            const response = await API.delete(`/unlike/${id}`);\n\n            if(response.data.status !== \"success\"){\n                setError(true);\n                return;\n            }\n\n            setIsLiked(false);\n            setCountLikes(countLikes - 1);\n\n        } catch(err){\n            console.log(err);\n        }\n    }\n\n    \n\n    useEffect(() => {\n        getSubscribtion();\n        getVideoById();\n        getVideos();\n        checkLike();\n    },[id]);\n\n    \n    return(\n        <div className=\"wrapper\">\n            <Sidebar />\n            <div className=\"container\">\n                <Navbar />\n                    {error ? (\n                        <h1>Server Error</h1>\n                    ): loading ? (\n                        <PageLoader />\n                    ):(\n                        \n                        <div className=\"video-container\">\n                            <Video \n                                currentUser={currentUser}\n                                subscribers={subscribers}\n                                subscribe={() => doSubscribe()}\n                                unSubscribe = {() => doUnSubscribe()} \n                                data={video}\n                                chanel={channel}\n                                checkSubscribe={() => checkSubscribe()}\n                                comments={comments}\n                                addComment={async (formData) => await addComment(formData)}\n                                deleteComment={async (commentId) => await deleteComment(commentId)}\n                                isLiked={isLiked}\n                                countLikes={countLikes}\n                                doLike={() => doLike()}\n                                unLike={() => unLike()}\n                        \n                                \n                               \n                            />\n                            <div className=\"recomendation-video\">\n                                {recomendationVideos.map(recomendVideo => {\n                                    \n                                    return (recomendVideo.id === video.id)? (null): (\n                                    <Card \n                                            key={recomendVideo.id} \n                                            data={recomendVideo}\n                                            edit={false} \n                                        />\n                                    )\n                                    \n                                })}\n                            \n                                {isFinish ? \n                                        null\n                                    :\n                                        <button onClick={showMore} className=\"show-more-videos\">\n                                            {loadShowMore ? (\n                                                <ButtonLoader />\n                                            ): (\n                                                \"Show More\"\n                                            )}    \n                                        </button>}\n                            </div>\n                           \n                        </div>\n                    )}           \n            </div>\n        </div>\n        \n   )\n}\n\nexport default Detail;","/home/jouziefrontend/wayshub-frontend/src/pages/EditChannel.js",["205","206"],"import React, { useEffect, useState, useContext } from 'react';\nimport edit_channel_icon from '../icon/edit_channel_icon.svg';\n\nimport Sidebar from '../component/sidebar/Sidebar';\nimport Navbar from '../component//navbar/Navbar';\nimport Preview from '../component/preview/Preview';\nimport Alert from '../component/form/Alert';\nimport ButtonLoader from '../component/loader/ButtonLoader';\nimport SuccessInfo from '../component/form/SuccessInfo';\nimport {AppContext} from '../context/AppContext';\nimport { API } from '../config/api';\n\nconst EditChannel = () => {\n    const [state, dispatch] = useContext(AppContext);\n    const [cover, setCover] = useState('Cover');\n    const [photo, setPhoto] = useState('Upload Photo');\n    const [preview, setPreview] = useState({});\n    const [success, setSuccess] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState({\n        status: false,\n        message: \"\"\n    });\n\n    const reader = new FileReader();\n\n    \n\n    const [formData, setFormData] = useState({\n        email: \"\",\n        password: \"\",\n        chanelName: \"\",\n        description: \"\",\n        cover: \"\",\n        photo: \"\"\n    });\n\n    const currentUser = JSON.parse(localStorage.getItem('user'));\n\n    const coverFile = React.useRef();\n    const photoFile = React.useRef();\n\n\n    const handleCoverInputClick = () => {\n        setError({\n            ...error,\n            status: false\n        });\n        setSuccess(false);\n        coverFile.current.click();\n    }\n\n    const handleCoverInputChange = (event) => {\n        if(event.target.files[0]){\n            setCover(event.target.files[0].name);\n            setFormData({\n                ...formData,\n                [event.target.name] : event.target.files[0]\n            });\n\n            \n            reader.readAsDataURL(event.target.files[0])\n            reader.onloadend = () => {\n                setPreview({\n                    ...preview, \n                    cover: reader.result\n                });\n        }\n            \n        } else {\n            setCover('Cover');\n        }\n        \n    }\n\n    const handlePhotoInputClick = () => {\n        setError({\n            ...error,\n            status: false\n        });\n        setSuccess(false);\n        photoFile.current.click();\n    }\n\n    const handlePhotoInputChange = (event) => {\n        if(event.target.files[0]){\n            setPhoto(event.target.files[0].name);\n            setFormData({\n                ...formData,\n                [event.target.name] : event.target.files[0]\n            })\n\n            reader.readAsDataURL(event.target.files[0])\n            reader.onloadend = () => {\n                setPreview({\n                    ...preview,\n                    photo: reader.result\n                });\n        }\n\n           \n        } else {\n            setPhoto('Upload Photo');\n        }\n        \n    }\n\n    const handleChange = (event) => {\n        setSuccess(false);\n        setError({\n            ...error,\n            status: false\n        });\n        setFormData({\n            ...formData,\n            [event.target.name] : event.target.value\n        });\n    }\n\n    const getChanelById = async () => {\n        try {\n            \n            const response = await API.get(`/chanel/${currentUser.id}`);\n\n            if(response.status !== 200){\n                setError(true);\n                return;\n            }\n\n            const chanel = response.data.data.chanel;\n\n            setFormData({\n                ...formData,\n                email: chanel.email,\n                password: chanel.password,\n                chanelName: chanel.chanelName,\n                description: chanel.description,           \n            });\n\n\n            setPreview({\n                ...preview,\n                cover: JSON.parse(chanel.cover).path,\n                photo: JSON.parse(chanel.photo).path\n            });\n    \n\n            \n        } catch(err){\n            console.log(err);\n        }\n    }\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        setError({\n            ...error,\n            status: false\n        });\n        setSuccess(false);\n        setLoading(true);\n\n        const body = new FormData();\n        body.append('email', formData.email );\n        body.append('password', formData.password);\n        body.append('chanelName', formData.chanelName);\n        body.append('description', formData.description);\n        \n        if(coverFile.current.files[0]){\n            body.append('cover', formData.cover);\n        }\n\n        if(photoFile.current.files[0]){\n            body.append('photo', formData.photo);\n        }\n\n        const config = {\n            headers: {\n              \"content-type\": \"multipart/form-data\",\n            },\n        };\n\n        try {\n            const response = await API.put(`/chanel/${currentUser.id}`, body, config);\n\n            if(response.data.status !== \"success\"){\n                setSuccess(false);\n                \n                setError({\n                    ...error,\n                    status: true,\n                    message: response.data.error.message\n                });\n                setLoading(false);\n                return;\n            }\n\n            setLoading(false);\n            setSuccess(true);\n            setError({\n                status: false,\n                message: ''\n            })\n            setPhoto('Upload Photo');\n            setCover('Cover');\n\n            const user = await API.get('/auth');\n            if(user.data.status !== 'success'){\n                return dispatch({\n                    type: 'AUTH_ERROR'\n                })\n            };\n\n            dispatch({\n                type: 'LOAD_USER',\n                payload: user.data.data.user\n            })\n           \n        } catch(err){\n            setLoading(false);\n            console.log(err);\n        }\n    }\n\n    useEffect(() => {\n        getChanelById();\n        \n    },[]);\n\n    return(\n        <div className=\"wrapper\">\n            <Sidebar />\n            <div className=\"container\">\n                <Navbar />\n                <div className=\"form-container\">\n                    <h1>Edit Channel</h1>\n                    {success && (<SuccessInfo message=\"Channel has been changed successfully\" />)}\n                    {error.status && (<Alert status=\"error-info\" message={error.message} />)}\n                    <form onSubmit={handleSubmit}>\n                        <div className=\"inline-input\">\n                            <input \n                                type=\"text\" \n                                placeholder=\"Name Channel\" \n                                name=\"chanelName\" \n                                value={formData.chanelName} \n                                onChange={handleChange}\n                                autoComplete=\"off\"\n                            />\n                            <div className=\"file-upload\" onClick={handleCoverInputClick}>\n                                <label>{cover}</label>\n                                <input \n                                    type=\"file\" \n                                    ref={coverFile} \n                                    onChange={handleCoverInputChange} \n                                    name=\"cover\"\n                                />\n                                <img src={edit_channel_icon} alt=\"icon\"/>    \n                            </div>\n                        </div>\n                        <textarea \n                            placeholder=\"Description\" \n                            name=\"description\" \n                            value={formData.description}\n                            onChange={handleChange}\n                        >\n                        </textarea>\n                        <div className=\"input-file-container\">\n                            <div className=\"input-file\" onClick={handlePhotoInputClick}>\n                                <label>{photo}</label>\n                                <input type=\"file\" ref={photoFile} onChange={handlePhotoInputChange} name=\"photo\"/>\n                                <img src={edit_channel_icon} alt=\"icon\"/>    \n                            </div>\n                        </div>\n                        <Preview data={preview} />\n                        <button className=\"button\">\n                            {loading ? (\n                                <ButtonLoader />\n                            ): (\"Save\")}\n                        </button>\n                        \n                    </form>\n                </div>\n            </div>\n\n        </div>\n        \n    )\n}\n\nexport default EditChannel;","/home/jouziefrontend/wayshub-frontend/src/pages/ContentCreator.js",["207","208"],"import { useState, useEffect, useContext } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\n\nimport '../App.css';\n\nimport ChannelVideo from '../component/channel/ChannelVideo';\n\nimport Sidebar from '../component/sidebar/Sidebar';\nimport Navbar from '../component//navbar/Navbar';\nimport VideoChanelLoader from '../component/loader/VideoChanelLoader';\nimport SubscribeModal from '../component/modal/SubscribeModal';\nimport EmptyVideo from '../component/video/EmptyVideo';\n\nimport { AppContext } from '../context/AppContext';\nimport { API } from '../config/api';\n\n\nconst ContentCreator = () => {\n    const [state, dispatch] = useContext(AppContext);\n    const [isSubscribe, setIsSubscribe] = useState(false);\n    const [error, setError] = useState(false);\n    const [loading, setLoading] = useState(true);\n    const [chanel, setChanel] = useState([]);\n    const [videos, setVideos] = useState([]);\n    const [subscribers, setSubscribers] = useState();\n    const { id } = useParams();\n    const router = useHistory();\n\n    const [modal, setModal] = useState({\n        status: false,\n        message: \"\"\n    });\n\n    const closeModal = () => {\n        setModal({\n            status: false,\n            message: \"\"\n        });\n    }\n\n    const getSubscribtion = async () => {\n        try {\n            const subscribtions = await API.get('/subscribe');\n\n            if(subscribtions.data.status === \"success\"){\n                dispatch({\n                    type: \"LOAD_SUBSCRIBTION\",\n                    payload: subscribtions.data.data\n                });\n                return;\n            }\n\n        } catch(err){\n            console.log(err)\n        }\n    }\n\n    const getChanelById = async () => {\n        try {\n            setLoading(true);\n            const currentUser = await JSON.parse(localStorage.getItem('user'));\n            const response = await API.get(`/chanel/${id}`);\n\n            if(response.data.status !== \"success\"){\n                setError(true);\n                return;\n            }\n\n            if(currentUser.id === response.data.data.chanel.id){\n                router.push('/my-channel');\n            }\n\n            const videosByChanelId = await API.get(`/chanel/${id}/videos`);\n            \n            if(videosByChanelId.data.status !== \"success\"){\n                setError(true);\n                return;\n            } \n\n            setChanel(response.data.data.chanel);\n            setVideos(videosByChanelId.data.data.videos);\n            setSubscribers(response.data.data.chanel.subscribers.length);\n           \n            setLoading(false);\n        } catch(err){\n            console.log(err);\n        }\n    }\n\n    const doSubscribe = async () => {\n        try {\n\n            const body = {\n                chanelId: chanel.id\n            }\n\n            \n            const response = await API.post('/subscribe', body);\n\n            if(response.data.status === \"success\"){\n                setIsSubscribe(true);\n                setModal({\n                    status: true,\n                    message: \"Subscribe to this channel\"\n                });\n                setSubscribers(subscribers + 1);\n                const subscribe = [...state.subscribtion];\n                subscribe.push(response.data.data.subscribe.chanel);\n                const subsbribtionAfterSubscribe = {\n                    subscribtion: subscribe\n                }\n\n                dispatch({\n                    type: \"SUBSCRIBE\",\n                    payload: subsbribtionAfterSubscribe\n                });\n                return;\n            }\n            \n        } catch(err){\n            console.log(err);\n        }\n    }\n\n    const doUnSubscribe = async () => {\n        try {\n\n            const chanelId = chanel.id;\n\n            const response = await API.delete(`/subscribe/${chanelId}`);\n\n            if(response.data.status === \"success\"){\n                setIsSubscribe(false);\n                setModal({\n                    status: true,\n                    message: \"Unsubscribe to this channel\"\n                });\n                setSubscribers(subscribers - 1);\n                const indexUnsubsribe = state.subscribtion.findIndex(subscribtion => subscribtion.id === parseInt(response.data.data.id));\n                \n                const subscribe = [...state.subscribtion];\n                subscribe.splice(indexUnsubsribe, 1);\n                const subsbribtionAfterUnSubscribe = {\n                    subscribtion: subscribe\n                }\n\n                dispatch({\n                    type: \"UNSUBSCRIBE\",\n                    payload: subsbribtionAfterUnSubscribe\n                });\n                return;\n            }\n            \n        } catch(err){\n            console.log(err);\n        }\n    }\n\n    const checkSubscribe = async () => {\n        try {\n            const body = {\n                chanelId: chanel.id\n            }\n\n            const response = await API.post('/check-subscribe', body);\n\n            if(response.data.status === \"success\"){\n                setIsSubscribe(true);\n                return\n                \n            }\n\n            setIsSubscribe(false);\n            return;\n            \n        } catch(err){\n            console.log(err);\n        }\n    }   \n\n    useEffect(() => {\n        getChanelById();\n        getSubscribtion();\n        return () => {\n            setModal({\n                status: false,\n                message: \"\"\n            })\n        }\n    }, [id]);\n\n    \n    useEffect(() => {\n        checkSubscribe();\n    }, [chanel.id]);\n\n    console.log(chanel)\n     \n    return(\n        <div className=\"wrapper\">\n            <Sidebar />\n            <div className=\"container\">\n                <Navbar />\n                {modal.status && (<SubscribeModal message={modal.message} closeModal={() => closeModal()} />)}\n                \n\n                {error ? (\n                    <h1>Server Error</h1>\n                ): loading ? (\n                    <VideoChanelLoader />\n                ):(\n                    <>\n                        <div className=\"cover\">\n                            <img src={JSON.parse(chanel.cover).path} alt=\"cover\" />\n                        </div>\n                        <div className=\"channel-wrapper\">\n                            <div className=\"channel-header border-bottom\">\n                                <img src={JSON.parse(chanel.photo).path} alt=\"foto profil\"/>\n                                <div className=\"channel-username\">\n                                    <span>{chanel.chanelName}</span>\n                                    <span>{subscribers} Subscribers</span>\n                                </div>\n                                <div className=\"button-wrapper\">\n                                {!isSubscribe ? (\n                                    <button className=\"btn-subscribe\" onClick={doSubscribe}>Subscribe</button>\n                                ):(\n                                    <button className=\"btn-unsubscribe\" onClick={doUnSubscribe}>Unsubscribe</button>\n                                )}\n                                </div>\n                            </div>\n                            {videos.length > 0? (\n                                 <ChannelVideo videos={videos} edit={false} />\n                            ): <EmptyVideo myChannel={false} />}\n                        </div>\n                    </>\n                )}\n                \n            </div>\n        </div>\n        \n    )\n}\n\nexport default ContentCreator;","/home/jouziefrontend/wayshub-frontend/src/config/api.js",[],"/home/jouziefrontend/wayshub-frontend/src/component/sidebar/Sidebar.js",["209","210"],"import './sidebar.css';\nimport {Link} from 'react-router-dom';\nimport { useContext, useEffect, useState } from 'react';\nimport Icon from '../../icon/icon.svg';\nimport home_icon from '../../icon/home_icon.svg';\nimport home_icon_active from '../../icon/home_icon_active.svg';\nimport subscription_icon from '../../icon/subscription_icon.svg';\nimport subscription_icon_active from '../../icon/subscription_icon_active.svg';\n\nimport { API } from '../../config/api';\nimport {AppContext} from '../../context/AppContext';\n\n\nconst Sidebar = () => {\n    const pathName = window.location.pathname;\n    const [state, dispatch] = useContext(AppContext);\n\n    const getSubscribtion = async () => {\n        try {\n            const subscribtions = await API.get('/subscribe');\n          \n            if(subscribtions.data.status === \"success\"){\n                \n                dispatch({\n                    type: \"LOAD_SUBSCRIBTION\",\n                    payload: subscribtions.data.data\n                });\n                return;\n            }\n\n\n        } catch(err){\n            console.log(err)\n        }\n    }\n\n\n    useEffect(() => {\n        getSubscribtion();\n    },[])\n\n    return(\n        <div className=\"sidebar\">\n            <img src={Icon} alt=\"icon\" className=\"sidebar-logo\"/>\n            <ul className=\"sidebar-list\">\n                <li className=\"sidebar-list-item\">\n                    <Link to=\"/\" className=\"sidebar-link\">\n                        <img src={pathName === '/'? home_icon_active:home_icon} alt=\"home_icon\" />\n                        <span className={pathName==='/'? \"active\":\"\"}>Home</span>\n                    </Link>\n                </li>\n                <li className=\"sidebar-list-item\">\n                    <Link to=\"/subscribtion\" className=\"sidebar-link\">\n                        <img src={pathName === '/subscribtion'? subscription_icon_active:subscription_icon} alt=\"subscription_icon\" />\n                        <span className={pathName === '/subscribtion'? \"active\":\"\"}>Subscribtion</span>\n                    </Link>\n                </li>\n            </ul>\n\n            {state.subscribtion.length > 0 && (\n                <h1 className=\"sidebar-list-title\">Channel</h1>\n            )}\n\n            <ul className=\"sidebar-list\">\n                {state.subscribtion.map(subscribtion => {\n                    return (\n                        <li className=\"sidebar-list-item\" key={subscribtion.id}>\n                            <Link to={`/content-creator/${subscribtion.id}`} className=\"sidebar-link\">\n                                <img src={JSON.parse(subscribtion.photo).path} alt=\"user_channel_icon\" className=\"sidebar-photo-profile\" />\n                                <span className=\"sidebar-username\">{subscribtion.chanelName}</span>\n                            </Link>\n                        </li>\n                    )\n                })}\n            </ul>\n\n            {state.subscribtion.length > 5 && (\n                <button className=\"show-more\">Show More</button>\n            )}\n        </div>\n    )\n}\n\nexport default Sidebar;","/home/jouziefrontend/wayshub-frontend/src/component/card/Card.js",["211"],"import './card.css';\nimport {Link} from 'react-router-dom';\nimport {useState, useEffect} from 'react';\nimport number_views from '../../icon/number_views.svg';\nimport refresh_icon from '../../icon/refresh_icon.svg';\nimport DropdownVideo from '../dropdown/DropdownVideo';\nimport menudots from '../../icon/menudots.png';\nimport CardLoader from '../loader/CardLoader';\n\nimport Modal from '../modal/Modal';\n\nconst Card = (props) => {\n    const [modal, setModal] = useState(false);\n    const [videoId, setVideoId] = useState(null);\n    const [showMenu, setShowMenu] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [thumbnail, setThumbnail] = useState();\n\n\n    const getThumbnail = () => {\n        setLoading(true);\n        setThumbnail(JSON.parse(props.data.thumbnail).path)\n        setLoading(false);\n    }\n\n    const showDropdown = () => {\n        if(showMenu){\n            setShowMenu(false);\n        } else {\n            setShowMenu(true);\n        }\n    }\n\n    const showModal = () => {\n        setVideoId(props.data.id);\n        setModal(true);\n    }\n    \n    const closeModal = () => {\n        setVideoId(null);\n        setModal(false);\n    }\n\n    const deleteVideo = () => {\n        props.actionDelete(videoId);\n        setModal(false);\n    }\n\n    useEffect(() => {\n        getThumbnail();\n    },[])\n\n    return(\n        <div className=\"card\">\n            {modal && (<Modal closemodal={() => { closeModal() }} actionDelete={() => deleteVideo()}/>)}\n            <div className=\"card-thumbnail-container\">\n                <Link to={`/detail/${props.data.id}`} className=\"link\">\n                    {loading ? (\n                        <CardLoader />\n                    ):(\n                        <img src={thumbnail} alt=\"card_thumbnail\" className=\"card-thumbnail\" />\n                    )}\n                </Link>\n                {props.edit && (\n                    <button className=\"btn-delete\" onClick={showDropdown}>\n                        <img src={menudots} alt=\"remove\" />\n                    </button>\n                )}\n                {showMenu && (\n                    <DropdownVideo \n                        showModalDelete={() => {showModal()}} \n                        show={showMenu} \n                        />\n                    )\n                }\n            </div>\n            <Link to={`/detail/${props.data.id}`} className=\"link\">\n                <h1 className=\"card-title\">{props.data.title}</h1>\n            </Link>\n            <Link to={`/content-creator/${props.data.chanel.id}`} className=\"link\">\n                <p className=\"card-username\">{props.data.chanel.chanelName}</p>\n            </Link>\n            <span>\n                <img src={number_views} alt=\"number_views\" /> {props.data.viewCount}\n            </span>\n            <span>\n                <img src={refresh_icon} alt=\"refresh_icon\" /> {new Date(props.data.createdAt).toLocaleDateString()}\n            </span>\n        </div>\n    )\n}\n\nexport default Card;","/home/jouziefrontend/wayshub-frontend/src/component/loader/PageLoader.js",[],"/home/jouziefrontend/wayshub-frontend/src/component/navbar/Navbar.js",["212","213"],"import {useState, useEffect} from 'react';\nimport {Link, useHistory} from 'react-router-dom';\nimport './navbar.css';\nimport add_video_icon from '../../icon/add_video_icon.svg';\nimport add_video_icon_active from '../../icon/add_video_icon_active.svg';\nimport Dropdown from '../dropdown/Dropdown';\nimport SearchResult from '../search/SearchResult';\nimport {API} from '../../config/api';\n\nconst Navbar = () => {\n    const [loading, setLoading] = useState(true);\n    const [loadResult, setLoadResult] = useState(false);\n    const [loadShowMore, setLoadShowMore] = useState(false);\n    const [result, setResult] = useState(false);\n    const [videos, setVideos] = useState([]);\n    const [limit, setLimit] = useState(4);\n    const [finish, setFinish] = useState(false);\n    const currentUser = JSON.parse(localStorage.getItem('user'));\n    const pathName = window.location.pathname;\n    const [isDropdown, setDropdown] = useState(false);\n    const history = useHistory();\n\n    const [formData, setFormData] = useState({\n        keyword: ''\n    });\n\n    const handleDropdown = () => {\n        isDropdown? setDropdown(false):setDropdown(true);\n    }\n\n    const getUser = () => {\n        if(!currentUser){\n            setLoading(true);\n        } else {\n            setLoading(false);\n            \n        }\n    }\n\n    const handleInputChange = async (event) => {\n        try {\n            setResult(true);\n            setLoadResult(true);\n            setFinish(false);\n            if(event.target.value === \"\"){\n                setVideos([]);\n                setResult(false);\n                setFormData({\n                    keyword: ''\n                })\n                setLoadResult(false);\n                return;\n            }\n            const body = {\n                keyword: event.target.value,\n                offset: 0,\n                limit\n            }\n\n            const response = await API.post('/search', body);\n            console.log(response.data.data.videos)\n\n            if(response.data.status !== \"success\"){\n                setVideos([]);\n                setResult(false);\n                setFormData({\n                    keyword: ''\n                })\n                setLoadResult(false)\n                return;\n            }\n\n            setFormData({\n                keyword: event.target.value\n            });\n\n            setVideos(\n                response.data.data.videos\n            )\n\n            setLoadResult(false);\n\n            if(response.data.data.videos.length === 0){\n                setVideos([]);\n            }\n\n          \n        } catch(err){\n            console.log(err);\n        }\n    }\n\n    const showMore = async () => {\n        try {\n            setLoadShowMore(true);\n\n            const tmpData = [...videos];\n            const lastIndex = tmpData.length;\n\n            const body = {\n                keyword: formData.keyword,\n                offset : tmpData.length,\n                limit\n            }\n\n            const response = await API.post('/search', body);\n\n            for(let i = 0; i < response.data.data.videos.length; i++){\n                tmpData[lastIndex + i] = response.data.data.videos[i]\n            }\n\n            if(response.data.data.videos.length === 0){\n                setFinish(true);\n            }\n\n            setVideos(tmpData);\n            setLoadShowMore(false)\n\n        } catch(err){\n            console.log(err);\n        }\n    }\n\n    useEffect(() => {\n        getUser();\n    },[currentUser])\n\n    useEffect(() => {\n        return history.listen(() => {\n            setDropdown(false);\n        })\n    }, [history]);\n\n    return(\n        <div className=\"navbar\">\n            <div className=\"search-bar\">\n                <input type=\"text\" placeholder=\"Search...\" onChange={handleInputChange} name=\"keyword\" autoComplete=\"off\"/>\n                {result && (\n                    <SearchResult \n                        videos={videos} \n                        showMore={showMore} \n                        isFinish={finish} \n                        loading={loadResult}\n                        loadShowMore={loadShowMore}\n                    />\n                )}\n            </div>\n            <div className=\"navbar-menu\">\n                <ul className=\"navbar-menu-list\">\n                    <li className=\"navbar-menu-item\">\n                        <Link to='/add' className=\"navbar-menu-link link\">\n                            <img src={pathName === '/add'? add_video_icon_active:add_video_icon} alt=\"add_video_icon\"/>\n                            <span className={pathName === '/add'? 'active':''}>Add Video</span>\n                        </Link>\n                    </li>\n\n                    <li className=\"navbar-menu-item\">\n                        <button className=\"navbar-menu-button\" onClick={handleDropdown}>\n                            {loading && !currentUser ? \"\":<img src={JSON.parse(currentUser.photo).path} alt=\"add_video_icon\"/>}\n                        </button>\n                        {isDropdown ? <Dropdown/>: \"\"}\n                    </li>\n                </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default Navbar;","/home/jouziefrontend/wayshub-frontend/src/component/loader/ButtonLoader.js",[],"/home/jouziefrontend/wayshub-frontend/src/component/loader/VideoChanelLoader.js",[],"/home/jouziefrontend/wayshub-frontend/src/component/form/InputField.js",["214","215","216","217"],"import './form.css';\nimport ErrorInfo from './ErrorInfo';\n\nimport {Fragment, useState, forwardRef, useImperativeHandle, useEffect} from 'react';\n\n\nconst InputField = forwardRef((props, ref) => {\n    const [isFocus, setFocus] = useState(false);\n    const [submit, setSubmit] = useState(false);\n    const [error, setError] = useState({\n        status:false,\n        messages: \"\"\n    });\n    const [value, setValue] = useState(props.value);\n\n    \n    const handleInputChange = (event) => {\n        setValue(event.target.value);\n        setError({\n            ...error,\n            messages:\"\"\n        });\n        props.onChange(event.target.name, event.target.value);\n\n        setFocus(true);\n        \n    }\n\n    const doSubmit = () => {\n        setSubmit(true);\n    }\n\n    \n    const validate = () =>{\n        \n        for(let i = 0; i < props.validation.length; i++){\n            if(props.validation[i] === \"required\"){\n                if(!value || value === \"\"){\n                    setError({\n                        ...error,\n                        status:true,\n                        messages: `The ${props.placeholder} field must be filled !`\n                    });\n        \n                    return false;\n                }\n                \n            }\n\n            if(props.validation[i] === \"email\"){\n                const mailformat = /[a-z0-9\\._%+!$&*=^|~#%'`?{}/\\-]+@([a-z0-9\\-]+\\.){1,}([a-z]{2,16})/;\n                if(!value.match(mailformat)){\n                    setError({\n                        ...error,\n                        status:true,\n                        messages: `Not valid email !`\n                    });\n\n                    return false;\n                }\n            }\n        }\n\n        setError({\n            status: false\n        });\n       \n        return true;\n        \n    }\n\n    useEffect(() => {\n        if(submit){\n            setSubmit(false);\n            setFocus(false);\n            setValue('')\n        }\n\n        if(isFocus){ \n            validate();\n        }\n    }, [value, submit]);\n\n    useImperativeHandle(ref, () => {\n        return {\n            validate: () => validate(),\n            doSubmit: () => doSubmit()\n        }\n    })\n\n    return(\n        <Fragment>\n            <input \n                type={props.type} \n                placeholder={props.placeholder} \n                name={props.name} \n                onChange={(event)=>{handleInputChange(event)}}\n                autoComplete={props.autoComplete}\n                value={value}\n            />\n            {error.status && (<ErrorInfo messages={error.messages}/>)}\n        </Fragment>\n    )\n})\n\nexport default InputField;","/home/jouziefrontend/wayshub-frontend/src/component/form/Alert.js",[],"/home/jouziefrontend/wayshub-frontend/src/component/channel/ChannelHeader.js",[],"/home/jouziefrontend/wayshub-frontend/src/component/form/TextAreaField.js",["218","219","220","221"],"import './form.css';\n\nimport ErrorInfo from './ErrorInfo';\nimport {Fragment, useState, forwardRef, useImperativeHandle, useEffect} from 'react';\n\nconst TextAreaField = forwardRef((props,ref) => {\n    const [isFocus, setFocus] = useState(false);\n    const [submit, setSubmit] = useState(false);\n\n    const [error, setError] = useState({\n        status:false,\n        messages: \"\"\n    });\n    const [value, setValue] = useState(props.value);\n\n    \n    const handleInputChange = (event) => {\n        setValue(event.target.value);\n        setError({\n            messages:\"\"\n        });\n        props.onChange(event.target.name, event.target.value);\n        setFocus(true);\n    }\n\n    const doSubmit = () => {\n        setSubmit(true);\n    }\n    \n    const validate = () =>{\n        for(let i = 0; i < props.validation.length; i++){\n            if(props.validation[i] === \"required\"){\n                if(!value || value === \"\"){\n                    setError({\n                        ...error,\n                        status:true,\n                        messages: `The ${props.placeholder} field must be filled !`\n                    });\n        \n                    return false;\n                } \n            }\n\n            if(props.validation[i] === \"email\"){\n                const mailformat = /[a-z0-9\\._%+!$&*=^|~#%'`?{}/\\-]+@([a-z0-9\\-]+\\.){1,}([a-z]{2,16})/;\n                if(!value.match(mailformat)){\n                    setError({\n                        ...error,\n                        status:true,\n                        messages: `Not valid email !`\n                    });\n        \n                    return false;\n                }\n            }\n        }\n\n        setError({\n            status: false\n        });\n        return true;\n        \n    }\n\n\n    useEffect(() => {\n        if(submit){\n            setSubmit(false);\n            setFocus(false);\n            setValue('');\n        }\n\n        if(isFocus){\n            validate();\n        }\n    }, [value, submit]);\n\n    useImperativeHandle(ref, () => {\n        return {\n            validate: () => validate(),\n            doSubmit: () => doSubmit()\n        }\n    })\n\n\n    return(\n        <Fragment>\n            <textarea\n                placeholder={props.placeholder} \n                name={props.name} \n                onChange={(event) => {handleInputChange(event)}}\n                autoComplete={props.autoComplete}\n                value={value}\n            ></textarea>\n            {error.status && (<ErrorInfo messages={error.messages}/>)}\n        </Fragment>\n    )\n})\n\nexport default TextAreaField;","/home/jouziefrontend/wayshub-frontend/src/component/channel/ChannelDescription.js",[],"/home/jouziefrontend/wayshub-frontend/src/component/channel/ChannelVideo.js",[],"/home/jouziefrontend/wayshub-frontend/src/component/video/EmptyVideo.js",[],"/home/jouziefrontend/wayshub-frontend/src/component/video/Video.js",["222"],"import './video.css';\nimport {Link} from 'react-router-dom';\nimport ReactPlayer from 'react-player';\n\nimport Comment from '../comment/Comment';\n\nimport number_views from '../../icon/number_views.svg';\nimport refresh_icon from '../../icon/refresh_icon.svg';\nimport like from '../../icon/like.png';\nimport liked from '../../icon/liked.png';\nimport SubscribeModal from '../modal/SubscribeModal';\nimport { useEffect, useState } from 'react';\n\nconst Video = (props) => {\n    const [isSubscribe, setIsSubscribe] = useState(false);\n    const [isSameChanel, setIsSameChanel] = useState(false);\n    const currentUser = JSON.parse(localStorage.getItem('user'));\n    const [toast, setToast] = useState({\n        status: false,\n        message: \"\"\n    });\n\n    const closeModal = () => {\n        setToast({\n            status: false,\n            message: \"\"\n        });\n    }\n\n    \n    const doSubscribe = () => {\n        props.subscribe();\n        setIsSubscribe(true);\n        setToast({\n            status: true,\n            message: \"Subscribe to this channel\"\n        });\n    }\n\n    const doUnSubscribe = () => {\n        props.unSubscribe();\n        setIsSubscribe(false);\n        setToast({\n            status: true,\n            message: \"Unsubscribe to this channel\"\n        });\n    }\n\n    const checkSubscribe = async () => {\n        const subscribe = await props.checkSubscribe();\n\n        setIsSubscribe(subscribe);\n    }\n\n    const doLike = () => {\n        props.doLike();\n        setToast({\n            status: true,\n            message: \"Like this video\"\n        })\n    }\n\n    const unLike = () => {\n        props.unLike();\n        setToast({\n            status: true,\n            message: \"Unlike this video\"\n        })\n    }\n\n\n    useEffect(() => {\n        if(currentUser.id === props.data.chanel.id){\n            setIsSameChanel(true);\n        }\n       checkSubscribe();\n       return () => {\n           setToast({\n               status: false,\n               message: \"\"\n           });\n       }\n    },[]);\n\n\n\n    return(\n        <div>\n            {toast.status && (<SubscribeModal message={toast.message} closeModal={() => closeModal()} />)}\n            <div className=\"video-wrapper\">\n                <ReactPlayer\n                    width=\"100%\"\n                    height=\"100%\"\n                    className=\"video-player\"\n                    playing\n                    url={JSON.parse(props.data.video).path}\n                    controls={true}\n                />\n                <h1 className=\"video-title\">{props.data.title}</h1>\n                <div className=\"video-info\">\n                    <div className=\"info-item\">\n                        {\n                            props.isLiked ? (\n                                <button onClick={unLike}>\n                            <img src={liked} alt=\"like-views\" />\n                        </button>\n                            ): (\n                                <button onClick={doLike}>\n                            <img src={like} alt=\"like-views\" />\n                        </button>\n                            )\n                        }\n                        <span>{props.countLikes}</span>\n                    </div>\n                    <div className=\"info-item\">\n                        <img src={number_views} alt=\"number_views\" /> \n                        <span>{props.data.viewCount}</span>\n                    </div>\n\n                    <div className=\"info-item\">\n                        <img src={refresh_icon} alt=\"refresh_icon\" />\n                        <span>{new Date(props.data.createdAt).toLocaleDateString()}</span>\n                    </div>\n                </div>\n            </div>\n            <div className=\"video-description-wrapper\">\n                <div className=\"video-description-header\">\n                    <img src={JSON.parse(props.data.chanel.photo).path} alt=\"foto profil\"/>\n                    <div className=\"video-username\">\n                        <Link to={`/content-creator/${props.data.chanel.id}`} className=\"link\">\n                            <span className=\"content-creator-username\">{props.data.chanel.chanelName}</span>\n                        </Link>\n                        <span className=\"count-subscriber\">{props.subscribers} Subscriber</span>\n                    </div>\n                    {!isSameChanel && (\n                        <div className=\"button-wrapper\">\n                            {!isSubscribe ? (\n                                <button className=\"btn-subscribe\" onClick={doSubscribe}>Subscribe</button>\n                            ):(\n                                <button className=\"btn-unsubscribe\" onClick={doUnSubscribe}>Unsubscribe</button>\n                            )}\n                        </div>\n                    )}\n                </div>\n                <div className=\"video-description-body\">\n                    <p>{props.data.description}</p>\n                    <button className=\"show-more\">Show More</button>\n                </div>\n                <Comment\n                    currentUser={props.currentUser} \n                    comments={props.comments}\n                    addComment={async (formData) => {\n                        await props.addComment(formData);\n                    }}\n                    deleteComment={async (commentId) => {\n                        await props.deleteComment(commentId);\n                    }}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default Video;","/home/jouziefrontend/wayshub-frontend/src/component/form/SuccessInfo.js",[],"/home/jouziefrontend/wayshub-frontend/src/component/progressbar/ProgressBar.js",[],"/home/jouziefrontend/wayshub-frontend/src/component/modal/SubscribeModal.js",["223"],"import { useEffect, useState } from 'react';\nimport './modal.css';\n\nconst SubscribeModal = (props) => {\n\n    const [show, setShow] = useState('close');\n\n\n    useEffect(() => {\n        setShow(\"show\");\n        setTimeout(() => {\n            setShow('close');\n            props.closeModal();\n        }, 2000);\n\n        return () => {\n            setShow('close');\n        }\n    },[]);\n\n\n    return  (\n        <div className={`modal-container-subscribe ${show}`}>\n            <div className=\"modal-box-subscribe\">\n                <div className=\"modal-header-subscribe\">\n                    <h1>{props.message}</h1>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default SubscribeModal;","/home/jouziefrontend/wayshub-frontend/src/component/preview/Preview.js",[],"/home/jouziefrontend/wayshub-frontend/src/component/modal/Modal.js",[],"/home/jouziefrontend/wayshub-frontend/src/component/loader/CardLoader.js",[],"/home/jouziefrontend/wayshub-frontend/src/component/form/ErrorInfo.js",[],"/home/jouziefrontend/wayshub-frontend/src/component/dropdown/Dropdown.js",["224"],"import {Link} from 'react-router-dom';\nimport {useContext} from 'react';\nimport {AppContext} from '../../context/AppContext';\n\nimport './dropdown.css';\nimport user_icon from '../../icon/user_icon.svg';\nimport user_icon_active from '../../icon/user_icon_active.svg';\nimport logout_icon from '../../icon/logout_icon.svg';\n\nconst Dropdown = () => {\n    const [state, dispatch] = useContext(AppContext);\n\n    const pathName = window.location.pathname;\n\n    const handleClick = () => {\n        dispatch({\n            type:\"LOGOUT\"\n        })\n    }\n\n    return(\n        <div className=\"dropdown-wrapper\">\n            <div className=\"polygon\"></div>\n            <ul className=\"dropdown-list\">\n                <li className=\"dropdown-item\">\n                    <Link to=\"/my-channel\" className=\"dropdown-link link\">\n                        <img src={pathName === '/my-channel'? user_icon_active:user_icon} alt=\"user icon\" />\n                        <span className={pathName === '/my-channel'? 'active':''}>My Channel</span>\n                    </Link>\n                </li>\n                <li className=\"dropdown-item\">\n                    <div className=\"dropdown-link\" onClick={handleClick}>\n                        <img src={logout_icon} alt=\"logout icon\" />\n                        <span>Logout</span>\n                    </div>\n                </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default Dropdown;","/home/jouziefrontend/wayshub-frontend/src/component/dropdown/DropdownVideo.js",[],"/home/jouziefrontend/wayshub-frontend/src/component/search/SearchResult.js",[],"/home/jouziefrontend/wayshub-frontend/src/component/comment/Comment.js",[],"/home/jouziefrontend/wayshub-frontend/src/component/comment/CommentList.js",["225"],"import './comment.css';\nimport menudots from '../../icon/menudots.png';\nimport DropdownComment from '../dropdown/DropdownComment';\nimport { useState, useEffect } from 'react';\nimport CommentModal from '../modal/CommentModal';\nimport CommentLoader from '../loader/CommentLoader';\n\nconst CommentList = (props) => {\n    const [showMenu, setShowMenu] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [sameUser, setSameUser] = useState(false);\n\n    const checkUser = () => {\n        setLoading(true);\n        const chanelId = props.data.chanel.id;\n        const currentUserId = props.currentUser.id;\n        \n        if(chanelId === currentUserId){\n            setSameUser(true)\n        } else {\n            setSameUser(false);\n        }\n        setLoading(false);\n    }\n    \n    const showDropdown = () => {\n        if(showMenu){\n            setShowMenu(false);\n        } else {\n            setShowMenu(true);\n        }\n    }\n\n    const showModalDelete = () => {\n        setShowMenu(false);\n        setShowModal(true);\n    }\n\n    const closeModalDelete = () => {\n        setShowModal(false);\n    }\n\n    const deleteComment = async () => {\n        setLoading(true);\n        await props.deleteComment(props.data.id);\n        setShowModal(false);\n        setLoading(false);\n        \n    }\n\n    useEffect(() => {\n        checkUser();\n    }, []);\n\n    return(\n        <div className=\"comment-list\">\n            {showModal && \n                (\n                    <CommentModal \n                        closeModal={()=> {closeModalDelete()}}\n                        actionDelete={() => {deleteComment()}} \n                    />\n                )}\n            <div className=\"triangle-comment\"></div>\n            <img className=\"comment-thumbnail\" src={JSON.parse(props.data.chanel.photo).path} alt=\"proifl\"/>\n            <div className=\"comment-body\">\n                {loading ? (\n                    <CommentLoader />\n                ):(\n                    <>\n                        <div className=\"comment\">\n                            <h2>{props.data.chanel.chanelName}</h2>\n                            <p>{props.data.comment}</p>\n                        </div>\n                        {sameUser && (\n                            <div className=\"comment-menu\">\n                                <button onClick={showDropdown}>\n                                    <img src={menudots} alt=\"menudots\" />\n                                </button>\n                            </div>\n                        )}\n                    </>\n                )}\n            </div>\n            {showMenu && (\n                <DropdownComment \n                    showModalDelete={() => {showModalDelete()}} \n                    show={showMenu} \n                />\n            )}\n        </div>\n    )\n}\n\nexport default CommentList;","/home/jouziefrontend/wayshub-frontend/src/component/modal/CommentModal.js",[],"/home/jouziefrontend/wayshub-frontend/src/component/loader/CommentLoader.js",[],["226","227"],"/home/jouziefrontend/wayshub-frontend/src/component/dropdown/DropdownComment.js",[],{"ruleId":"228","replacedBy":"229"},{"ruleId":"230","replacedBy":"231"},{"ruleId":"232","severity":1,"message":"233","line":67,"column":5,"nodeType":"234","endLine":67,"endColumn":18,"suggestions":"235"},{"ruleId":"236","severity":1,"message":"237","line":21,"column":19,"nodeType":"238","messageId":"239","endLine":21,"endColumn":27},{"ruleId":"232","severity":1,"message":"240","line":71,"column":8,"nodeType":"234","endLine":71,"endColumn":10,"suggestions":"241"},{"ruleId":"236","severity":1,"message":"242","line":13,"column":12,"nodeType":"238","messageId":"239","endLine":13,"endColumn":17},{"ruleId":"236","severity":1,"message":"243","line":14,"column":12,"nodeType":"238","messageId":"239","endLine":14,"endColumn":19},{"ruleId":"232","severity":1,"message":"244","line":70,"column":8,"nodeType":"234","endLine":70,"endColumn":10,"suggestions":"245"},{"ruleId":"236","severity":1,"message":"246","line":3,"column":27,"nodeType":"238","messageId":"239","endLine":3,"endColumn":36},{"ruleId":"236","severity":1,"message":"247","line":39,"column":11,"nodeType":"238","messageId":"239","endLine":39,"endColumn":22},{"ruleId":"236","severity":1,"message":"237","line":24,"column":19,"nodeType":"238","messageId":"239","endLine":24,"endColumn":27},{"ruleId":"232","severity":1,"message":"248","line":319,"column":7,"nodeType":"234","endLine":319,"endColumn":11,"suggestions":"249"},{"ruleId":"236","severity":1,"message":"242","line":14,"column":12,"nodeType":"238","messageId":"239","endLine":14,"endColumn":17},{"ruleId":"232","severity":1,"message":"244","line":228,"column":7,"nodeType":"234","endLine":228,"endColumn":9,"suggestions":"250"},{"ruleId":"232","severity":1,"message":"251","line":190,"column":8,"nodeType":"234","endLine":190,"endColumn":12,"suggestions":"252"},{"ruleId":"232","severity":1,"message":"253","line":195,"column":8,"nodeType":"234","endLine":195,"endColumn":19,"suggestions":"254"},{"ruleId":"236","severity":1,"message":"255","line":3,"column":33,"nodeType":"238","messageId":"239","endLine":3,"endColumn":41},{"ruleId":"232","severity":1,"message":"256","line":40,"column":7,"nodeType":"234","endLine":40,"endColumn":9,"suggestions":"257"},{"ruleId":"232","severity":1,"message":"258","line":51,"column":7,"nodeType":"234","endLine":51,"endColumn":9,"suggestions":"259"},{"ruleId":"236","severity":1,"message":"237","line":16,"column":19,"nodeType":"238","messageId":"239","endLine":16,"endColumn":27},{"ruleId":"232","severity":1,"message":"260","line":126,"column":7,"nodeType":"234","endLine":126,"endColumn":20,"suggestions":"261"},{"ruleId":"262","severity":1,"message":"263","line":51,"column":44,"nodeType":"264","messageId":"265","endLine":51,"endColumn":45,"suggestions":"266"},{"ruleId":"262","severity":1,"message":"267","line":51,"column":65,"nodeType":"264","messageId":"265","endLine":51,"endColumn":66,"suggestions":"268"},{"ruleId":"262","severity":1,"message":"267","line":51,"column":78,"nodeType":"264","messageId":"265","endLine":51,"endColumn":79,"suggestions":"269"},{"ruleId":"232","severity":1,"message":"270","line":82,"column":8,"nodeType":"234","endLine":82,"endColumn":23,"suggestions":"271"},{"ruleId":"262","severity":1,"message":"263","line":45,"column":44,"nodeType":"264","messageId":"265","endLine":45,"endColumn":45,"suggestions":"272"},{"ruleId":"262","severity":1,"message":"267","line":45,"column":65,"nodeType":"264","messageId":"265","endLine":45,"endColumn":66,"suggestions":"273"},{"ruleId":"262","severity":1,"message":"267","line":45,"column":78,"nodeType":"264","messageId":"265","endLine":45,"endColumn":79,"suggestions":"274"},{"ruleId":"232","severity":1,"message":"270","line":76,"column":8,"nodeType":"234","endLine":76,"endColumn":23,"suggestions":"275"},{"ruleId":"232","severity":1,"message":"276","line":83,"column":7,"nodeType":"234","endLine":83,"endColumn":9,"suggestions":"277"},{"ruleId":"232","severity":1,"message":"278","line":19,"column":7,"nodeType":"234","endLine":19,"endColumn":9,"suggestions":"279"},{"ruleId":"236","severity":1,"message":"242","line":11,"column":12,"nodeType":"238","messageId":"239","endLine":11,"endColumn":17},{"ruleId":"232","severity":1,"message":"280","line":54,"column":8,"nodeType":"234","endLine":54,"endColumn":10,"suggestions":"281"},{"ruleId":"228","replacedBy":"282"},{"ruleId":"230","replacedBy":"283"},"no-native-reassign",["284"],"no-negated-in-lhs",["285"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadUser'. Either include it or remove the dependency array.","ArrayExpression",["286"],"no-unused-vars","'setLimit' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'getVideos'. Either include it or remove the dependency array.",["287"],"'state' is assigned a value but never used.","'loading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getChanelById'. Either include it or remove the dependency array.",["288"],"'useEffect' is defined but never used.","'currentUser' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'checkLike', 'getSubscribtion', 'getVideoById', and 'getVideos'. Either include them or remove the dependency array.",["289"],["290"],"React Hook useEffect has missing dependencies: 'getChanelById' and 'getSubscribtion'. Either include them or remove the dependency array.",["291"],"React Hook useEffect has a missing dependency: 'checkSubscribe'. Either include it or remove the dependency array.",["292"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'getSubscribtion'. Either include it or remove the dependency array.",["293"],"React Hook useEffect has a missing dependency: 'getThumbnail'. Either include it or remove the dependency array.",["294"],"React Hook useEffect has a missing dependency: 'getUser'. Either include it or remove the dependency array.",["295"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["296","297"],"Unnecessary escape character: \\-.",["298","299"],["300","301"],"React Hook useEffect has missing dependencies: 'isFocus' and 'validate'. Either include them or remove the dependency array.",["302"],["303","304"],["305","306"],["307","308"],["309"],"React Hook useEffect has missing dependencies: 'checkSubscribe', 'currentUser.id', and 'props.data.chanel.id'. Either include them or remove the dependency array.",["310"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["311"],"React Hook useEffect has a missing dependency: 'checkUser'. Either include it or remove the dependency array.",["312"],["284"],["285"],"no-global-assign","no-unsafe-negation",{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},{"desc":"317","fix":"321"},{"desc":"322","fix":"323"},{"desc":"324","fix":"325"},{"desc":"326","fix":"327"},{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"messageId":"332","fix":"333","desc":"334"},{"messageId":"335","fix":"336","desc":"337"},{"messageId":"332","fix":"338","desc":"334"},{"messageId":"335","fix":"339","desc":"337"},{"messageId":"332","fix":"340","desc":"334"},{"messageId":"335","fix":"341","desc":"337"},{"desc":"342","fix":"343"},{"messageId":"332","fix":"344","desc":"334"},{"messageId":"335","fix":"345","desc":"337"},{"messageId":"332","fix":"346","desc":"334"},{"messageId":"335","fix":"347","desc":"337"},{"messageId":"332","fix":"348","desc":"334"},{"messageId":"335","fix":"349","desc":"337"},{"desc":"342","fix":"350"},{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},"Update the dependencies array to be: [loadUser, state.login]",{"range":"357","text":"358"},"Update the dependencies array to be: [getVideos]",{"range":"359","text":"360"},"Update the dependencies array to be: [getChanelById]",{"range":"361","text":"362"},"Update the dependencies array to be: [checkLike, getSubscribtion, getVideoById, getVideos, id]",{"range":"363","text":"364"},{"range":"365","text":"362"},"Update the dependencies array to be: [getChanelById, getSubscribtion, id]",{"range":"366","text":"367"},"Update the dependencies array to be: [chanel.id, checkSubscribe]",{"range":"368","text":"369"},"Update the dependencies array to be: [getSubscribtion]",{"range":"370","text":"371"},"Update the dependencies array to be: [getThumbnail]",{"range":"372","text":"373"},"Update the dependencies array to be: [currentUser, getUser]",{"range":"374","text":"375"},"removeEscape",{"range":"376","text":"377"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"378","text":"379"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"380","text":"377"},{"range":"381","text":"379"},{"range":"382","text":"377"},{"range":"383","text":"379"},"Update the dependencies array to be: [value, submit, isFocus, validate]",{"range":"384","text":"385"},{"range":"386","text":"377"},{"range":"387","text":"379"},{"range":"388","text":"377"},{"range":"389","text":"379"},{"range":"390","text":"377"},{"range":"391","text":"379"},{"range":"392","text":"385"},"Update the dependencies array to be: [checkSubscribe, currentUser.id, props.data.chanel.id]",{"range":"393","text":"394"},"Update the dependencies array to be: [props]",{"range":"395","text":"396"},"Update the dependencies array to be: [checkUser]",{"range":"397","text":"398"},[1443,1456],"[loadUser, state.login]",[1911,1913],"[getVideos]",[2170,2172],"[getChanelById]",[8558,8562],"[checkLike, getSubscribtion, getVideoById, getVideos, id]",[5959,5961],[5468,5472],"[getChanelById, getSubscribtion, id]",[5536,5547],"[chanel.id, checkSubscribe]",[1157,1159],"[getSubscribtion]",[1329,1331],"[getThumbnail]",[3461,3474],"[currentUser, getUser]",[1358,1359],"",[1358,1358],"\\",[1379,1380],[1379,1379],[1392,1393],[1392,1392],[2025,2040],"[value, submit, isFocus, validate]",[1302,1303],[1302,1302],[1323,1324],[1323,1323],[1336,1337],[1336,1336],[1970,1985],[2006,2008],"[checkSubscribe, currentUser.id, props.data.chanel.id]",[378,380],"[props]",[1419,1421],"[checkUser]"]